<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<mapper namespace="com.kh.mappers.RoomMapper">

	<!-- 관리자 미승인 방 리스트 보기 -->
	<select id="getRoomAdminCheckNList" resultType="RoomDetailDto">
		select * from(select rownum rnum, r.* from (select * from tbl_room where room_admin_check = 'N' and room_num != 0 
		order by room_num desc) r)
		where rnum &gt;= #{startRow} and rnum &lt;= #{endRow}
	</select>
	
	<!-- 관리자 미승인 방 갯수 세기 -->
	<select id="getRoomAdminCheckNCount" resultType="int">
		select count(*) from tbl_room where room_admin_check = 'N' and room_num != 0
	</select>
	
	<!-- 관리자 승인 방 갯수 세기 -->
	<select id="getRoomAdminCheckYCount" resultType="int">
		select count(*) from tbl_room where room_admin_check = 'Y' and room_num != 0
	</select>
	
	<!-- 관리자 승인 방 리스트 보기 -->
	<select id="getRoomAdminCheckYList" resultType="RoomDetailDto">
		select * from(select rownum rnum, r.* from (select * from tbl_room where room_admin_check = 'Y' and room_num != 0 
		order by room_num desc) r)
		where rnum &gt;= #{startRow} and rnum &lt;= #{endRow}
	</select>

	<!-- 관리자 방 승인 상태변경하기 -->
	<update id="updateRoomAdminCheckY">
		update tbl_room set room_admin_check = 'Y' 
		where room_num = #{room_num}
	</update>

	<!-- 관리자 방 미승인 상태변경하기 -->
	<update id="updateRoomAdminCheckN">
		update tbl_room set room_admin_check = 'N' 
		where room_num = #{room_num}
	</update>

	<!-- 관리자 방 승인, 미승인 상태변경하기 -->
	<update id="updateRoomAdminCheckChange">
		update tbl_room set room_admin_check = #{room_admin_check}
		where room_num = #{room_num}
	</update>


	<!-- 첨부 파일 경로(위치+파일명) 추가 -->
	<insert id="attach">
		insert into tbl_room_picture(pic_uri, room_num)
		values (#{pic_uri}, #{room_num})
	</insert>
	
	<!-- 첨부파일명 목록 -->
	<select id="getAttach" resultType="string">
		select pic_uri from tbl_room_picture
		where room_num = #{room_num}
	</select>
	
	<!-- 첨부파일 데이터 삭제 -->
	<delete id="deleteAttach">
		delete from tbl_room_picture
		where pic_uri = #{pic_uri}
	</delete>
	
	<!-- 첨부파일 테이블 데이터(by room_num) 삭제 -->
	<delete id="deleteAttachByRoomNum">
		delete from tbl_room_picture
		where room_num = #{room_num}
	</delete>
	
	<!-- 오늘 이후로 예약이 있는지 없는지 확인 -->
	<!-- 이것의 결과가 0이면 삭제가능 -->
	<select id="isReserved" resultType="int">
		select count(*) 
		from tbl_reservation rsvd, tbl_room room 
		where rsvd.room_num = room.room_num
		and room.room_num = #{room_num} and rsvd.room_reserv_end_date > sysdate
	</select>
	
	<!-- 방 삭제하기 -->
	<!-- 방 삭제전 호스트 삭제 트랜잭션 하기 -->
	<delete id="deleteHostRoom" >
		delete from tbl_room where room_num = #{room_num} and user_email = #{user_email}
	</delete>

	<!-- 호스트가 등록한 숙소 목록 보기 -->
	<select id="getHostRoomList" resultType="RoomDetailDto">
		select * from
        (select rownum rnum, j.* from
        (select r.room_num, r.room_type_num, r.user_email, r.room_location, r.room_score, r.room_price,
                r.room_explain, r.room_people, r.room_bed, r.room_bathroom, r.room_title,
                r.room_option_code, r.room_status, r.room_admin_check, t.room_type_explain
        from tbl_room r, tbl_room_type t 
		where r.user_email = #{user_email}
		and r.room_type_num = t.room_type_num
		order by r.room_status asc, r.room_num desc) j)
		where rnum &gt;= #{cyPagingDto.startRow} and rnum &lt;= #{cyPagingDto.endRow}
	</select>
	
	<!-- 호스트가 등록한 숙소 갯수 세기 -->
	<select id="getHostRoomListCount" resultType="int">
		select count(*) from tbl_room r, tbl_room_type t 
		where  user_email = #{user_email}
		and r.room_type_num = t.room_type_num
		order by r.room_status asc, r.room_num desc
	</select>
	
	<!-- 숙소 1개 상세보기 -->
	<select id="getHostRoomDetail" resultType="RoomDetailDto">
		select *
		from tbl_room r, tbl_room_type t
		where  r.room_num = #{room_num}
		and r.room_type_num = t.room_type_num
	</select>
	
	<!-- 숙소 정보 수정하기 -->
	<update id="updateHostRoom">
		update tbl_room set 
					room_type_num = #{room_type_num}, 
                    room_location = #{room_location},
                    room_location_detail = #{room_location_detail},
                    room_title = #{room_title},
                    room_explain = #{room_explain},
                    room_price = #{room_price},
                    room_people = #{room_people},
                    room_bed = #{room_bed},
                    room_bathroom = #{room_bathroom},
                    room_option_code = #{room_option_code},
                    room_status = #{room_status}
                where room_num = #{room_num}
	</update>

	<!-- 숙소 업로드를위한 tbl_room의 room_num.nextval 받아오기 -->
	<!-- SELECT LAST_NUMBER FROM USER_SEQUENCES WHERE SEQUENCE_NAME = 'SEQ_ROOM_NUM' -->
	<select id="getNextRoomNum" resultType="int" >
		select seq_room_num.nextval from dual
	</select>

	<!-- 숙소 등록하기 -->
	<insert id="registerRoom">
		insert into tbl_room (room_num, room_type_num, user_email, 
                      room_location, room_location_detail, 
                      room_title, room_price, room_explain, 
                      room_people, room_bed, room_bathroom, room_option_code)		
                      			
		values (#{room_num},#{room_type_num},#{user_email},		
                    #{room_location}, #{room_location_detail},
                    #{room_title}, #{room_price}, #{room_explain},
                     #{room_people}, #{room_bed}, #{room_bathroom}, #{room_option_code})
	</insert>
	
	

	<!-- 방 목록 보기 -->
	<select id="getRoomList" resultType="RoomVo" parameterType="SearchVo">
	select * from (select rownum rnum, x.* from (select * from (select a.* 
		from (select r.* from tbl_room r 
				<include refid="search"></include>
			order by r.room_num asc) a) y,
            (SELECT pic_uri, room_num room_num2
                FROM (
                    SELECT pic_uri, room_num, ROW_NUMBER() OVER(PARTITION BY room_num ORDER BY pic_uri DESC) as rn
                    FROM tbl_room_picture) 
                WHERE rn=1
            ) z
        where y.room_num = z.room_num2 ) x) xx
		where xx.rnum &gt;= #{startRow} and xx.rnum &lt;= #{endRow}
	</select>
	
	<!-- 방 count -->
	<select id="getRoomCount" resultType="int">
		select count(*) from tbl_room r 
			<include refid="search"></include>
	</select>
	
	<sql id="search">
		where r.room_location like '%' || #{keyword} || '%'
		<if test="room_reserv_start_date != null">
			and r.room_num not in (
				select v.room_num from tbl_reservation v where (
				(room_reserv_start_date &gt; #{room_reserv_start_date} and room_reserv_end_date &lt;= #{room_reserv_end_date}) or
				(room_reserv_start_date &gt; #{room_reserv_start_date} and room_reserv_start_date &lt;= #{room_reserv_end_date}) or
				(room_reserv_end_date &gt; #{room_reserv_start_date} and room_reserv_end_date &lt;= #{room_reserv_end_date}))
				and reserv_state = 'Y'
			)
		</if>
			<!-- 인원, 가격 -->
			and r.room_people &gt;= #{room_people} and (r.room_price &gt;= #{low_price} and r.room_price &lt;= #{high_price})
			<!-- 방타입 -->
			and regexp_like(r.room_type_num, #{joinType})
			<!-- 화장실, 침대 -->
			and r.room_bathroom &gt;=#{room_bathroom} and r.room_bed &gt;=#{room_bed}
			<!-- 옵션 -->
		<if test="listOption != null">
			<foreach item="option" collection="listOption" separator="and" close="" open="and">
        		r.room_option_code LIKE '%'|| #{option} ||'%'
    		</foreach>
    	</if>
    		<!-- 공개 여부 -->
    		 and room_status = 'Y' and room_admin_check = 'Y'
	</sql>
	
	<!-- 방 type -->
	<select id="getRoomType" resultType="RoomTypeVo">
		select * from tbl_room_type
	</select>
	
	<!-- 방 옵션 -->
	<select id="getRoomOption" resultType="RoomOptionVo">
		select * from tbl_room_option
	</select>
	
	<!-- 최저가 최고가 -->
	<select id="getRoomPrice" resultType="RoomLowHighPriceDto">
		select max(room_price) max_high_price, min(room_price) min_low_price from tbl_room
	</select>
	
	<!-- 검색 목록 ajax -->
	<select id="getKeywordList" resultType="SearchKeywordDto">
		select * from tbl_search_location where location_text like '%'|| #{search_keyword} ||'%'
	</select>
  
</mapper>